name: Python Tests SonarQube Scan

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  python-tests-sonarqube-scan:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "pypy3.11", "3.10", "3.11", "3.12", "3.13" ]
        #python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov pytest-mock mypy
          python -m pip install flake8 flake8-builtins pep8-naming
          python -m pip install flake8-functions-names flake8-variables-names
          python -m pip install -r requirements.txt

      - name: Lint with flake8 and mypy
        # flake8 ignore errors:
        # https://www.flake8rules.com:
        # E402 - Module level import not at top of file
        # F401 - Module imported but unused
        # F811 - Redefinition of unused name from line n
        # https://github.com/PyCQA/pep8-naming:
        # N817 - Camelcase imported as acronym (distinct from N814 for selective enforcement)
        # https://github.com/Melevir/flake8-functions-names:
        # FNE003 - Name of the function uses save, but not uses to
        # FNE004 - Name of the function uses load, but not uses from
        # FNE005 - Return type of the function is bool-like1, but the name doesn't show it
        # FNE008 - Name of functions ends with its first argument name
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=120 --statistics \
            --ignore=F401,E402,F811,N817,FNE003,FNE004,FNE005,FNE008
          mypy .

      - name: Test with pytest and coverage
        run: pytest --cov=src --cov-report=xml:coverage.xml --cov-config=tests/.coveragerc

      - name: Read VERSION file
        if: matrix.python-version == '3.13'
        id: getversion
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        if: matrix.python-version == '3.13'
        uses: sonarsource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.getversion.outputs.version }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
